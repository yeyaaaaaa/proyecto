// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using proyecto.Data;

#nullable disable

namespace proyecto.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("proyecto.Models.Afiliacion", b =>
                {
                    b.Property<int>("AfiliacionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("AfiliacionID"));

                    b.Property<int>("EPSFK")
                        .HasColumnType("int");

                    b.Property<string>("TipoIdentificacion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("UsuarioFK")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioID")
                        .HasColumnType("int");

                    b.HasKey("AfiliacionID");

                    b.HasIndex("EPSFK");

                    b.HasIndex("UsuarioFK")
                        .IsUnique();

                    b.HasIndex("UsuarioID");

                    b.ToTable("Afiliaciones");
                });

            modelBuilder.Entity("proyecto.Models.Cita", b =>
                {
                    b.Property<int>("CitaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CitaID"));

                    b.Property<int>("EnfermeroFK")
                        .HasColumnType("int");

                    b.Property<int>("EstadoFK")
                        .HasColumnType("int");

                    b.Property<int>("ExamenFK")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime(6)");

                    b.Property<TimeSpan>("Hora")
                        .HasColumnType("time(6)");

                    b.Property<int>("UsuarioFK")
                        .HasColumnType("int");

                    b.HasKey("CitaID");

                    b.HasIndex("EnfermeroFK");

                    b.HasIndex("EstadoFK");

                    b.HasIndex("ExamenFK");

                    b.HasIndex("UsuarioFK");

                    b.ToTable("Citas");
                });

            modelBuilder.Entity("proyecto.Models.EPS", b =>
                {
                    b.Property<int>("EPSID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EPSID"));

                    b.Property<string>("NIT")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("EPSID");

                    b.ToTable("EPSs");
                });

            modelBuilder.Entity("proyecto.Models.Enfermero", b =>
                {
                    b.Property<int>("EnfermeroID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EnfermeroID"));

                    b.Property<string>("Especialidad")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Licencia")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("UsuarioFK")
                        .HasColumnType("int");

                    b.HasKey("EnfermeroID");

                    b.HasIndex("UsuarioFK")
                        .IsUnique();

                    b.ToTable("Enfermeros");
                });

            modelBuilder.Entity("proyecto.Models.EstadoCita", b =>
                {
                    b.Property<int>("EstadoCitaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EstadoCitaID"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("EstadoCitaID");

                    b.ToTable("EstadoCitas");
                });

            modelBuilder.Entity("proyecto.Models.Examen", b =>
                {
                    b.Property<int>("ExamenID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ExamenID"));

                    b.Property<string>("Descripcion")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("ExamenID");

                    b.ToTable("Examenes");
                });

            modelBuilder.Entity("proyecto.Models.HistorialCita", b =>
                {
                    b.Property<int>("HistorialCitaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("HistorialCitaID"));

                    b.Property<string>("Accion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("CitaFK")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaAccion")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UsuarioAccion")
                        .HasColumnType("int");

                    b.HasKey("HistorialCitaID");

                    b.HasIndex("CitaFK");

                    b.HasIndex("UsuarioAccion");

                    b.ToTable("HistorialCitas");
                });

            modelBuilder.Entity("proyecto.Models.LogSistema", b =>
                {
                    b.Property<int>("LogSistemaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("LogSistemaID"));

                    b.Property<string>("Accion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UsuarioFK")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioID")
                        .HasColumnType("int");

                    b.HasKey("LogSistemaID");

                    b.HasIndex("UsuarioID");

                    b.ToTable("LogsSistema");
                });

            modelBuilder.Entity("proyecto.Models.Notificacion", b =>
                {
                    b.Property<int>("NotificacionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("NotificacionID"));

                    b.Property<DateTime>("FechaEnvio")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Leido")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Mensaje")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("UsuarioFK")
                        .HasColumnType("int");

                    b.HasKey("NotificacionID");

                    b.HasIndex("UsuarioFK");

                    b.ToTable("Notificaciones");
                });

            modelBuilder.Entity("proyecto.Models.Paciente", b =>
                {
                    b.Property<int>("PacienteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PacienteID"));

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("Nacimiento")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("UsuarioFK")
                        .HasColumnType("int");

                    b.HasKey("PacienteID");

                    b.HasIndex("UsuarioFK")
                        .IsUnique();

                    b.ToTable("Pacientes");
                });

            modelBuilder.Entity("proyecto.Models.Reprogramacion", b =>
                {
                    b.Property<int>("ReprogramacionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ReprogramacionID"));

                    b.Property<int>("CitaFK")
                        .HasColumnType("int");

                    b.Property<string>("Motivo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("NuevaFecha")
                        .HasColumnType("datetime(6)");

                    b.Property<TimeSpan>("NuevaHora")
                        .HasColumnType("time(6)");

                    b.HasKey("ReprogramacionID");

                    b.HasIndex("CitaFK");

                    b.ToTable("Reprogramaciones");
                });

            modelBuilder.Entity("proyecto.Models.Resultado", b =>
                {
                    b.Property<int>("ResultadoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ResultadoID"));

                    b.Property<string>("ArchivoPDF")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("CitaFK")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaSubida")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("SubidoPor")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioID")
                        .HasColumnType("int");

                    b.HasKey("ResultadoID");

                    b.HasIndex("CitaFK")
                        .IsUnique();

                    b.HasIndex("UsuarioID");

                    b.ToTable("Resultados");
                });

            modelBuilder.Entity("proyecto.Models.Rol", b =>
                {
                    b.Property<int>("RolID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("RolID"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("RolID");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("proyecto.Models.Usuario", b =>
                {
                    b.Property<int>("UsuarioID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UsuarioID"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Contraseña")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Documento")
                        .HasColumnType("int");

                    b.Property<bool>("Estado")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("RolFK")
                        .HasColumnType("int");

                    b.HasKey("UsuarioID");

                    b.HasIndex("RolFK");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("proyecto.Models.Afiliacion", b =>
                {
                    b.HasOne("proyecto.Models.EPS", "EPS")
                        .WithMany("Afiliaciones")
                        .HasForeignKey("EPSFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("proyecto.Models.Usuario", "Usuario")
                        .WithOne("Afiliacion")
                        .HasForeignKey("proyecto.Models.Afiliacion", "UsuarioFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("proyecto.Models.Usuario", null)
                        .WithMany("Afiliaciones")
                        .HasForeignKey("UsuarioID");

                    b.Navigation("EPS");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("proyecto.Models.Cita", b =>
                {
                    b.HasOne("proyecto.Models.Enfermero", "Enfermero")
                        .WithMany("Citas")
                        .HasForeignKey("EnfermeroFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("proyecto.Models.EstadoCita", "Estado")
                        .WithMany("Citas")
                        .HasForeignKey("EstadoFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("proyecto.Models.Examen", "Examen")
                        .WithMany("Citas")
                        .HasForeignKey("ExamenFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("proyecto.Models.Usuario", "Usuario")
                        .WithMany("Citas")
                        .HasForeignKey("UsuarioFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enfermero");

                    b.Navigation("Estado");

                    b.Navigation("Examen");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("proyecto.Models.Enfermero", b =>
                {
                    b.HasOne("proyecto.Models.Usuario", "Usuario")
                        .WithOne("Enfermero")
                        .HasForeignKey("proyecto.Models.Enfermero", "UsuarioFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("proyecto.Models.HistorialCita", b =>
                {
                    b.HasOne("proyecto.Models.Cita", "Cita")
                        .WithMany("Historial")
                        .HasForeignKey("CitaFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("proyecto.Models.Usuario", "Usuario")
                        .WithMany("HistorialCitas")
                        .HasForeignKey("UsuarioAccion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cita");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("proyecto.Models.LogSistema", b =>
                {
                    b.HasOne("proyecto.Models.Usuario", "Usuario")
                        .WithMany("Logs")
                        .HasForeignKey("UsuarioID");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("proyecto.Models.Notificacion", b =>
                {
                    b.HasOne("proyecto.Models.Usuario", "Usuario")
                        .WithMany("Notificaciones")
                        .HasForeignKey("UsuarioFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("proyecto.Models.Paciente", b =>
                {
                    b.HasOne("proyecto.Models.Usuario", "Usuario")
                        .WithOne("Paciente")
                        .HasForeignKey("proyecto.Models.Paciente", "UsuarioFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("proyecto.Models.Reprogramacion", b =>
                {
                    b.HasOne("proyecto.Models.Cita", "Cita")
                        .WithMany("Reprogramaciones")
                        .HasForeignKey("CitaFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cita");
                });

            modelBuilder.Entity("proyecto.Models.Resultado", b =>
                {
                    b.HasOne("proyecto.Models.Cita", "Cita")
                        .WithOne("Resultado")
                        .HasForeignKey("proyecto.Models.Resultado", "CitaFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("proyecto.Models.Usuario", "Usuario")
                        .WithMany("ResultadosSubidos")
                        .HasForeignKey("UsuarioID");

                    b.Navigation("Cita");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("proyecto.Models.Usuario", b =>
                {
                    b.HasOne("proyecto.Models.Rol", "Rol")
                        .WithMany("Usuarios")
                        .HasForeignKey("RolFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("proyecto.Models.Cita", b =>
                {
                    b.Navigation("Historial");

                    b.Navigation("Reprogramaciones");

                    b.Navigation("Resultado");
                });

            modelBuilder.Entity("proyecto.Models.EPS", b =>
                {
                    b.Navigation("Afiliaciones");
                });

            modelBuilder.Entity("proyecto.Models.Enfermero", b =>
                {
                    b.Navigation("Citas");
                });

            modelBuilder.Entity("proyecto.Models.EstadoCita", b =>
                {
                    b.Navigation("Citas");
                });

            modelBuilder.Entity("proyecto.Models.Examen", b =>
                {
                    b.Navigation("Citas");
                });

            modelBuilder.Entity("proyecto.Models.Rol", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("proyecto.Models.Usuario", b =>
                {
                    b.Navigation("Afiliacion");

                    b.Navigation("Afiliaciones");

                    b.Navigation("Citas");

                    b.Navigation("Enfermero");

                    b.Navigation("HistorialCitas");

                    b.Navigation("Logs");

                    b.Navigation("Notificaciones");

                    b.Navigation("Paciente");

                    b.Navigation("ResultadosSubidos");
                });
#pragma warning restore 612, 618
        }
    }
}
